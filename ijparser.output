Terminals which are not used

   RESERVED


Grammar

    0 $accept: start $end

    1 start: CLASS ID '{' decls '}'
    2      | CLASS ID '{' '}'

    3 decls: decls fielddecl
    4      | decls methoddecl
    5      | fielddecl
    6      | methoddecl

    7 fielddecl: STATIC vardecl

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' '{' vardecl stmtlist '}'

    9 methodtype: type
   10           | VOID

   11 formalparams: type ID formalparamslist
   12             | STRING '[' ']' ID
   13             | /* empty */

   14 formalparamslist: formalparamslist ',' type ID
   15                 | /* empty */

   16 stmtlist: stmtlist statement
   17         | /* empty */

   18 vardecl: type ID vardecllist ';'

   19 vardecllist: vardecllist ',' ID
   20            | /* empty */

   21 type: INT '[' ']'
   22     | BOOL '[' ']'
   23     | INT
   24     | BOOL

   25 statement: '{' stmtlist '}'
   26          | IF '(' expr ')' statement ELSE statement
   27          | IF '(' expr ')' statement
   28          | WHILE '(' expr ')' statement
   29          | PRINT '(' expr ')' ';'
   30          | ID '[' expr ']' '=' expr ';'
   31          | ID '=' expr ';'
   32          | RETURN expr ';'
   33          | RETURN ';'

   34 expr: expr1
   35     | expr1 '[' expr ']'
   36     | expr2

   37 expr1: expr AND expr
   38      | expr OR expr
   39      | expr RELCOMPAR expr
   40      | expr EQUALITY expr
   41      | expr ADDITIVE expr
   42      | expr MULTIPLIC expr
   43      | ID
   44      | INTLIT
   45      | BOOLLIT
   46      | '(' expr ')'
   47      | expr DOTLENGTH
   48      | '!' expr
   49      | ADDITIVE expr
   50      | PARSEINT '(' ID '[' expr ']' ')'
   51      | ID '(' args ')'
   52      | ID '(' ')'

   53 expr2: NEW INT '[' expr ']'
   54      | NEW BOOL '[' expr ']'

   55 args: expr argslist
   56     | expr

   57 argslist: ',' args


Terminals, with rules where they appear

$end (0) 0
'!' (33) 48
'(' (40) 8 26 27 28 29 46 50 51 52
')' (41) 8 26 27 28 29 46 50 51 52
',' (44) 14 19 57
';' (59) 18 29 30 31 32 33
'=' (61) 30 31
'[' (91) 12 21 22 30 35 50 53 54
']' (93) 12 21 22 30 35 50 53 54
'{' (123) 1 2 8 25
'}' (125) 1 2 8 25
error (256)
INT (258) 21 23 53
BOOL (259) 22 24 54
NEW (260) 53 54
IF (261) 26 27
ELSE (262) 26
WHILE (263) 28
PRINT (264) 29
PARSEINT (265) 50
CLASS (266) 1 2
PUBLIC (267) 8
STATIC (268) 7 8
VOID (269) 10
STRING (270) 12
DOTLENGTH (271) 47
RETURN (272) 32 33
AND (273) 37
OR (274) 38
RELCOMPAR (275) 39
BOOLLIT (276) 45
ID (277) 1 2 8 11 12 14 18 19 30 31 43 50 51 52
INTLIT (278) 44
RESERVED (279)
EQUALITY (280) 40
ADDITIVE (281) 41 49
MULTIPLIC (282) 42
UNARY (283)
EXPR1REDUCE (284)
IFX (285)


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
start (42)
    on left: 1 2, on right: 0
decls (43)
    on left: 3 4 5 6, on right: 1 3 4
fielddecl (44)
    on left: 7, on right: 3 5
methoddecl (45)
    on left: 8, on right: 4 6
methodtype (46)
    on left: 9 10, on right: 8
formalparams (47)
    on left: 11 12 13, on right: 8
formalparamslist (48)
    on left: 14 15, on right: 11 14
stmtlist (49)
    on left: 16 17, on right: 8 16 25
vardecl (50)
    on left: 18, on right: 7 8
vardecllist (51)
    on left: 19 20, on right: 18 19
type (52)
    on left: 21 22 23 24, on right: 9 11 14 18
statement (53)
    on left: 25 26 27 28 29 30 31 32 33, on right: 16 26 27 28
expr (54)
    on left: 34 35 36, on right: 26 27 28 29 30 31 32 35 37 38 39 40
    41 42 46 47 48 49 50 53 54 55 56
expr1 (55)
    on left: 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52,
    on right: 34 35
expr2 (56)
    on left: 53 54, on right: 36
args (57)
    on left: 55 56, on right: 51 57
argslist (58)
    on left: 57, on right: 55


state 0

    0 $accept: . start $end

    CLASS  shift, and go to state 1

    start  go to state 2


state 1

    1 start: CLASS . ID '{' decls '}'
    2      | CLASS . ID '{' '}'

    ID  shift, and go to state 3


state 2

    0 $accept: start . $end

    $end  shift, and go to state 4


state 3

    1 start: CLASS ID . '{' decls '}'
    2      | CLASS ID . '{' '}'

    '{'  shift, and go to state 5


state 4

    0 $accept: start $end .

    $default  accept


state 5

    1 start: CLASS ID '{' . decls '}'
    2      | CLASS ID '{' . '}'

    PUBLIC  shift, and go to state 6
    STATIC  shift, and go to state 7
    '}'     shift, and go to state 8

    decls       go to state 9
    fielddecl   go to state 10
    methoddecl  go to state 11


state 6

    8 methoddecl: PUBLIC . STATIC methodtype ID '(' formalparams ')' '{' vardecl stmtlist '}'

    STATIC  shift, and go to state 12


state 7

    7 fielddecl: STATIC . vardecl

    INT   shift, and go to state 13
    BOOL  shift, and go to state 14

    vardecl  go to state 15
    type     go to state 16


state 8

    2 start: CLASS ID '{' '}' .

    $default  reduce using rule 2 (start)


state 9

    1 start: CLASS ID '{' decls . '}'
    3 decls: decls . fielddecl
    4      | decls . methoddecl

    PUBLIC  shift, and go to state 6
    STATIC  shift, and go to state 7
    '}'     shift, and go to state 17

    fielddecl   go to state 18
    methoddecl  go to state 19


state 10

    5 decls: fielddecl .

    $default  reduce using rule 5 (decls)


state 11

    6 decls: methoddecl .

    $default  reduce using rule 6 (decls)


state 12

    8 methoddecl: PUBLIC STATIC . methodtype ID '(' formalparams ')' '{' vardecl stmtlist '}'

    INT   shift, and go to state 13
    BOOL  shift, and go to state 14
    VOID  shift, and go to state 20

    methodtype  go to state 21
    type        go to state 22


state 13

   21 type: INT . '[' ']'
   23     | INT .

    '['  shift, and go to state 23

    $default  reduce using rule 23 (type)


state 14

   22 type: BOOL . '[' ']'
   24     | BOOL .

    '['  shift, and go to state 24

    $default  reduce using rule 24 (type)


state 15

    7 fielddecl: STATIC vardecl .

    $default  reduce using rule 7 (fielddecl)


state 16

   18 vardecl: type . ID vardecllist ';'

    ID  shift, and go to state 25


state 17

    1 start: CLASS ID '{' decls '}' .

    $default  reduce using rule 1 (start)


state 18

    3 decls: decls fielddecl .

    $default  reduce using rule 3 (decls)


state 19

    4 decls: decls methoddecl .

    $default  reduce using rule 4 (decls)


state 20

   10 methodtype: VOID .

    $default  reduce using rule 10 (methodtype)


state 21

    8 methoddecl: PUBLIC STATIC methodtype . ID '(' formalparams ')' '{' vardecl stmtlist '}'

    ID  shift, and go to state 26


state 22

    9 methodtype: type .

    $default  reduce using rule 9 (methodtype)


state 23

   21 type: INT '[' . ']'

    ']'  shift, and go to state 27


state 24

   22 type: BOOL '[' . ']'

    ']'  shift, and go to state 28


state 25

   18 vardecl: type ID . vardecllist ';'

    $default  reduce using rule 20 (vardecllist)

    vardecllist  go to state 29


state 26

    8 methoddecl: PUBLIC STATIC methodtype ID . '(' formalparams ')' '{' vardecl stmtlist '}'

    '('  shift, and go to state 30


state 27

   21 type: INT '[' ']' .

    $default  reduce using rule 21 (type)


state 28

   22 type: BOOL '[' ']' .

    $default  reduce using rule 22 (type)


state 29

   18 vardecl: type ID vardecllist . ';'
   19 vardecllist: vardecllist . ',' ID

    ','  shift, and go to state 31
    ';'  shift, and go to state 32


state 30

    8 methoddecl: PUBLIC STATIC methodtype ID '(' . formalparams ')' '{' vardecl stmtlist '}'

    INT     shift, and go to state 13
    BOOL    shift, and go to state 14
    STRING  shift, and go to state 33

    $default  reduce using rule 13 (formalparams)

    formalparams  go to state 34
    type          go to state 35


state 31

   19 vardecllist: vardecllist ',' . ID

    ID  shift, and go to state 36


state 32

   18 vardecl: type ID vardecllist ';' .

    $default  reduce using rule 18 (vardecl)


state 33

   12 formalparams: STRING . '[' ']' ID

    '['  shift, and go to state 37


state 34

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams . ')' '{' vardecl stmtlist '}'

    ')'  shift, and go to state 38


state 35

   11 formalparams: type . ID formalparamslist

    ID  shift, and go to state 39


state 36

   19 vardecllist: vardecllist ',' ID .

    $default  reduce using rule 19 (vardecllist)


state 37

   12 formalparams: STRING '[' . ']' ID

    ']'  shift, and go to state 40


state 38

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' . '{' vardecl stmtlist '}'

    '{'  shift, and go to state 41


state 39

   11 formalparams: type ID . formalparamslist

    $default  reduce using rule 15 (formalparamslist)

    formalparamslist  go to state 42


state 40

   12 formalparams: STRING '[' ']' . ID

    ID  shift, and go to state 43


state 41

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' '{' . vardecl stmtlist '}'

    INT   shift, and go to state 13
    BOOL  shift, and go to state 14

    vardecl  go to state 44
    type     go to state 16


state 42

   11 formalparams: type ID formalparamslist .
   14 formalparamslist: formalparamslist . ',' type ID

    ','  shift, and go to state 45

    $default  reduce using rule 11 (formalparams)


state 43

   12 formalparams: STRING '[' ']' ID .

    $default  reduce using rule 12 (formalparams)


state 44

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' '{' vardecl . stmtlist '}'

    $default  reduce using rule 17 (stmtlist)

    stmtlist  go to state 46


state 45

   14 formalparamslist: formalparamslist ',' . type ID

    INT   shift, and go to state 13
    BOOL  shift, and go to state 14

    type  go to state 47


state 46

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' '{' vardecl stmtlist . '}'
   16 stmtlist: stmtlist . statement

    IF      shift, and go to state 48
    WHILE   shift, and go to state 49
    PRINT   shift, and go to state 50
    RETURN  shift, and go to state 51
    ID      shift, and go to state 52
    '{'     shift, and go to state 53
    '}'     shift, and go to state 54

    statement  go to state 55


state 47

   14 formalparamslist: formalparamslist ',' type . ID

    ID  shift, and go to state 56


state 48

   26 statement: IF . '(' expr ')' statement ELSE statement
   27          | IF . '(' expr ')' statement

    '('  shift, and go to state 57


state 49

   28 statement: WHILE . '(' expr ')' statement

    '('  shift, and go to state 58


state 50

   29 statement: PRINT . '(' expr ')' ';'

    '('  shift, and go to state 59


state 51

   32 statement: RETURN . expr ';'
   33          | RETURN . ';'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    ';'       shift, and go to state 67
    '!'       shift, and go to state 68

    expr   go to state 69
    expr1  go to state 70
    expr2  go to state 71


state 52

   30 statement: ID . '[' expr ']' '=' expr ';'
   31          | ID . '=' expr ';'

    '['  shift, and go to state 72
    '='  shift, and go to state 73


state 53

   25 statement: '{' . stmtlist '}'

    $default  reduce using rule 17 (stmtlist)

    stmtlist  go to state 74


state 54

    8 methoddecl: PUBLIC STATIC methodtype ID '(' formalparams ')' '{' vardecl stmtlist '}' .

    $default  reduce using rule 8 (methoddecl)


state 55

   16 stmtlist: stmtlist statement .

    $default  reduce using rule 16 (stmtlist)


state 56

   14 formalparamslist: formalparamslist ',' type ID .

    $default  reduce using rule 14 (formalparamslist)


state 57

   26 statement: IF '(' . expr ')' statement ELSE statement
   27          | IF '(' . expr ')' statement

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 75
    expr1  go to state 70
    expr2  go to state 71


state 58

   28 statement: WHILE '(' . expr ')' statement

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 76
    expr1  go to state 70
    expr2  go to state 71


state 59

   29 statement: PRINT '(' . expr ')' ';'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 77
    expr1  go to state 70
    expr2  go to state 71


state 60

   53 expr2: NEW . INT '[' expr ']'
   54      | NEW . BOOL '[' expr ']'

    INT   shift, and go to state 78
    BOOL  shift, and go to state 79


state 61

   50 expr1: PARSEINT . '(' ID '[' expr ']' ')'

    '('  shift, and go to state 80


state 62

   45 expr1: BOOLLIT .

    $default  reduce using rule 45 (expr1)


state 63

   43 expr1: ID .
   51      | ID . '(' args ')'
   52      | ID . '(' ')'

    '('  shift, and go to state 81

    $default  reduce using rule 43 (expr1)


state 64

   44 expr1: INTLIT .

    $default  reduce using rule 44 (expr1)


state 65

   49 expr1: ADDITIVE . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 82
    expr1  go to state 70
    expr2  go to state 71


state 66

   46 expr1: '(' . expr ')'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 83
    expr1  go to state 70
    expr2  go to state 71


state 67

   33 statement: RETURN ';' .

    $default  reduce using rule 33 (statement)


state 68

   48 expr1: '!' . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 84
    expr1  go to state 70
    expr2  go to state 71


state 69

   32 statement: RETURN expr . ';'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ';'        shift, and go to state 92


state 70

   34 expr: expr1 .
   35     | expr1 . '[' expr ']'

    '['  shift, and go to state 93

    $default  reduce using rule 34 (expr)


state 71

   36 expr: expr2 .

    $default  reduce using rule 36 (expr)


state 72

   30 statement: ID '[' . expr ']' '=' expr ';'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 94
    expr1  go to state 70
    expr2  go to state 71


state 73

   31 statement: ID '=' . expr ';'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 95
    expr1  go to state 70
    expr2  go to state 71


state 74

   16 stmtlist: stmtlist . statement
   25 statement: '{' stmtlist . '}'

    IF      shift, and go to state 48
    WHILE   shift, and go to state 49
    PRINT   shift, and go to state 50
    RETURN  shift, and go to state 51
    ID      shift, and go to state 52
    '{'     shift, and go to state 53
    '}'     shift, and go to state 96

    statement  go to state 55


state 75

   26 statement: IF '(' expr . ')' statement ELSE statement
   27          | IF '(' expr . ')' statement
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ')'        shift, and go to state 97


state 76

   28 statement: WHILE '(' expr . ')' statement
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ')'        shift, and go to state 98


state 77

   29 statement: PRINT '(' expr . ')' ';'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ')'        shift, and go to state 99


state 78

   53 expr2: NEW INT . '[' expr ']'

    '['  shift, and go to state 100


state 79

   54 expr2: NEW BOOL . '[' expr ']'

    '['  shift, and go to state 101


state 80

   50 expr1: PARSEINT '(' . ID '[' expr ']' ')'

    ID  shift, and go to state 102


state 81

   51 expr1: ID '(' . args ')'
   52      | ID '(' . ')'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    ')'       shift, and go to state 103
    '!'       shift, and go to state 68

    expr   go to state 104
    expr1  go to state 70
    expr2  go to state 71
    args   go to state 105


state 82

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   49      | ADDITIVE expr .

    DOTLENGTH  shift, and go to state 85

    $default  reduce using rule 49 (expr1)


state 83

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   46      | '(' expr . ')'
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ')'        shift, and go to state 106


state 84

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   48      | '!' expr .

    DOTLENGTH  shift, and go to state 85

    $default  reduce using rule 48 (expr1)


state 85

   47 expr1: expr DOTLENGTH .

    $default  reduce using rule 47 (expr1)


state 86

   37 expr1: expr AND . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 107
    expr1  go to state 70
    expr2  go to state 71


state 87

   38 expr1: expr OR . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 108
    expr1  go to state 70
    expr2  go to state 71


state 88

   39 expr1: expr RELCOMPAR . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 109
    expr1  go to state 70
    expr2  go to state 71


state 89

   40 expr1: expr EQUALITY . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 110
    expr1  go to state 70
    expr2  go to state 71


state 90

   41 expr1: expr ADDITIVE . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 111
    expr1  go to state 70
    expr2  go to state 71


state 91

   42 expr1: expr MULTIPLIC . expr

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 112
    expr1  go to state 70
    expr2  go to state 71


state 92

   32 statement: RETURN expr ';' .

    $default  reduce using rule 32 (statement)


state 93

   35 expr: expr1 '[' . expr ']'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 113
    expr1  go to state 70
    expr2  go to state 71


state 94

   30 statement: ID '[' expr . ']' '=' expr ';'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ']'        shift, and go to state 114


state 95

   31 statement: ID '=' expr . ';'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ';'        shift, and go to state 115


state 96

   25 statement: '{' stmtlist '}' .

    $default  reduce using rule 25 (statement)


state 97

   26 statement: IF '(' expr ')' . statement ELSE statement
   27          | IF '(' expr ')' . statement

    IF      shift, and go to state 48
    WHILE   shift, and go to state 49
    PRINT   shift, and go to state 50
    RETURN  shift, and go to state 51
    ID      shift, and go to state 52
    '{'     shift, and go to state 53

    statement  go to state 116


state 98

   28 statement: WHILE '(' expr ')' . statement

    IF      shift, and go to state 48
    WHILE   shift, and go to state 49
    PRINT   shift, and go to state 50
    RETURN  shift, and go to state 51
    ID      shift, and go to state 52
    '{'     shift, and go to state 53

    statement  go to state 117


state 99

   29 statement: PRINT '(' expr ')' . ';'

    ';'  shift, and go to state 118


state 100

   53 expr2: NEW INT '[' . expr ']'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 119
    expr1  go to state 70
    expr2  go to state 71


state 101

   54 expr2: NEW BOOL '[' . expr ']'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 120
    expr1  go to state 70
    expr2  go to state 71


state 102

   50 expr1: PARSEINT '(' ID . '[' expr ']' ')'

    '['  shift, and go to state 121


state 103

   52 expr1: ID '(' ')' .

    $default  reduce using rule 52 (expr1)


state 104

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   55 args: expr . argslist
   56     | expr .

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ','        shift, and go to state 122

    $default  reduce using rule 56 (args)

    argslist  go to state 123


state 105

   51 expr1: ID '(' args . ')'

    ')'  shift, and go to state 124


state 106

   46 expr1: '(' expr ')' .

    $default  reduce using rule 46 (expr1)


state 107

   37 expr1: expr . AND expr
   37      | expr AND expr .
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91

    $default  reduce using rule 37 (expr1)


state 108

   37 expr1: expr . AND expr
   38      | expr . OR expr
   38      | expr OR expr .
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91

    $default  reduce using rule 38 (expr1)


state 109

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   39      | expr RELCOMPAR expr .
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91

    $default  reduce using rule 39 (expr1)


state 110

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   40      | expr EQUALITY expr .
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    RELCOMPAR  shift, and go to state 88
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91

    $default  reduce using rule 40 (expr1)


state 111

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   41      | expr ADDITIVE expr .
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    MULTIPLIC  shift, and go to state 91

    $default  reduce using rule 41 (expr1)


state 112

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   42      | expr MULTIPLIC expr .
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85

    $default  reduce using rule 42 (expr1)


state 113

   35 expr: expr1 '[' expr . ']'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ']'        shift, and go to state 125


state 114

   30 statement: ID '[' expr ']' . '=' expr ';'

    '='  shift, and go to state 126


state 115

   31 statement: ID '=' expr ';' .

    $default  reduce using rule 31 (statement)


state 116

   26 statement: IF '(' expr ')' statement . ELSE statement
   27          | IF '(' expr ')' statement .

    ELSE  shift, and go to state 127

    $default  reduce using rule 27 (statement)


state 117

   28 statement: WHILE '(' expr ')' statement .

    $default  reduce using rule 28 (statement)


state 118

   29 statement: PRINT '(' expr ')' ';' .

    $default  reduce using rule 29 (statement)


state 119

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   53 expr2: NEW INT '[' expr . ']'

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ']'        shift, and go to state 128


state 120

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   54 expr2: NEW BOOL '[' expr . ']'

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ']'        shift, and go to state 129


state 121

   50 expr1: PARSEINT '(' ID '[' . expr ']' ')'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 130
    expr1  go to state 70
    expr2  go to state 71


state 122

   57 argslist: ',' . args

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 104
    expr1  go to state 70
    expr2  go to state 71
    args   go to state 131


state 123

   55 args: expr argslist .

    $default  reduce using rule 55 (args)


state 124

   51 expr1: ID '(' args ')' .

    $default  reduce using rule 51 (expr1)


state 125

   35 expr: expr1 '[' expr ']' .

    $default  reduce using rule 35 (expr)


state 126

   30 statement: ID '[' expr ']' '=' . expr ';'

    NEW       shift, and go to state 60
    PARSEINT  shift, and go to state 61
    BOOLLIT   shift, and go to state 62
    ID        shift, and go to state 63
    INTLIT    shift, and go to state 64
    ADDITIVE  shift, and go to state 65
    '('       shift, and go to state 66
    '!'       shift, and go to state 68

    expr   go to state 132
    expr1  go to state 70
    expr2  go to state 71


state 127

   26 statement: IF '(' expr ')' statement ELSE . statement

    IF      shift, and go to state 48
    WHILE   shift, and go to state 49
    PRINT   shift, and go to state 50
    RETURN  shift, and go to state 51
    ID      shift, and go to state 52
    '{'     shift, and go to state 53

    statement  go to state 133


state 128

   53 expr2: NEW INT '[' expr ']' .

    $default  reduce using rule 53 (expr2)


state 129

   54 expr2: NEW BOOL '[' expr ']' .

    $default  reduce using rule 54 (expr2)


state 130

   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH
   50      | PARSEINT '(' ID '[' expr . ']' ')'

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ']'        shift, and go to state 134


state 131

   57 argslist: ',' args .

    $default  reduce using rule 57 (argslist)


state 132

   30 statement: ID '[' expr ']' '=' expr . ';'
   37 expr1: expr . AND expr
   38      | expr . OR expr
   39      | expr . RELCOMPAR expr
   40      | expr . EQUALITY expr
   41      | expr . ADDITIVE expr
   42      | expr . MULTIPLIC expr
   47      | expr . DOTLENGTH

    DOTLENGTH  shift, and go to state 85
    AND        shift, and go to state 86
    OR         shift, and go to state 87
    RELCOMPAR  shift, and go to state 88
    EQUALITY   shift, and go to state 89
    ADDITIVE   shift, and go to state 90
    MULTIPLIC  shift, and go to state 91
    ';'        shift, and go to state 135


state 133

   26 statement: IF '(' expr ')' statement ELSE statement .

    $default  reduce using rule 26 (statement)


state 134

   50 expr1: PARSEINT '(' ID '[' expr ']' . ')'

    ')'  shift, and go to state 136


state 135

   30 statement: ID '[' expr ']' '=' expr ';' .

    $default  reduce using rule 30 (statement)


state 136

   50 expr1: PARSEINT '(' ID '[' expr ']' ')' .

    $default  reduce using rule 50 (expr1)
